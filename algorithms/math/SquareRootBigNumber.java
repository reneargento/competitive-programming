package algorithms.math;

import java.math.BigInteger;

/**
 * Created by Rene Argento on 04/05/25.
 */
// Efficiently computes the square root of a big number using Newton's method.
// Time Complexity: O(lg n)
public class SquareRootBigNumber {

    private static BigInteger computeSquareRoot(BigInteger number) {
        BigInteger squareRoot;
        BigInteger x = number;
        BigInteger divider = new BigInteger("2");

        while (true) {
            BigInteger sum = x.add(number.divide(x));
            squareRoot = sum.divide(divider);

            if (squareRoot.subtract(x).abs().compareTo(BigInteger.ONE) < 0) {
                break;
            }
            x = squareRoot;
        }
        return squareRoot;
    }

    public static void main(String[] args) {
        BigInteger value = new BigInteger("6922779789710140382458715982951055336079400474699183892516894930254222851053938842387613077129022047602130232052869523857646085908323733033595475017186265049422736320110783517478924300608134865834175487347257298433853747871153794802075704105491897179487752542251328640472000730058247543290247261123286581978052693810252060450834424262483797929175732402696094562577375928836425965799878980229923886468643414529681012438713608362940467459692740845977496433830532747394677291364443983202079264967275590748924154757772559945728896499330987730566442827849067786616255908197866122503713331041857956843501080228659615692539211254299161081331734230936917509501122996493832084592823213695439523323284373400860460417142936746289651301445122361001913095771390497955327531910919515811170786925051192115168523299950497978917856662683406534319769922537144778707800230254451857038449249747792778529140155546480846847948074532208400");
        BigInteger squareRoot = computeSquareRoot(value);

        BigInteger expectedValue = new BigInteger("83203243865309364406014918518317473130446708465890844211360851041072066452208962301556563794545130605254295091957973490454063962186483518098680884374995909691276966170925490734928691122229854808263487229063340592267617369429375700154206829192737145710320947059567871411568646793807243517729774258834559963533251192576649423611921859339712914207909323006925767162317933162890085688671333315121524430224360043880388666070175027948372237880633353215307138264220");
        boolean testPassed = squareRoot.compareTo(expectedValue) == 0;
        System.out.println("Test passed: " + testPassed);
    }
}
